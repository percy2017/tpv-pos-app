<%- include('partials/header', { title: 'Biblioteca Multimedia' }) %>
<%- include('partials/navigation', { title: 'Biblioteca Multimedia' }) %>

<main class="container-fluid">
    <div class="card">
        <div class="card-header">
            <h5 class="card-title mb-0">
                <i class="bi bi-images me-2"></i>Biblioteca Multimedia
            </h5>
        </div>
        <div class="card-body">
            <!-- <p>Aquí se mostrarán los archivos multimedia de Chatwoot en una tabla.</p> -->
            <table id="mediaTable" class="table table-striped table-bordered" style="width:100%">
                <thead>
                    <tr>
                        <th>Miniatura</th>
                        <!-- <th>Nombre Archivo</th> -->
                        <th>Tipo</th>
                        <th>Tamaño</th>
                        <th>Dimensiones</th>
                        <th>Remitente</th>
                        <th>Conversación ID</th>
                        <th>Fecha</th>
                        <!-- <th>Acciones</th> -->
                    </tr>
                </thead>
                <tbody>
                    <!-- Los datos se cargarán aquí por DataTables -->
                </tbody>
            </table>
            <div id="conversationPaginationContainer" class="mt-4 d-flex justify-content-center">
                <!-- Paginación para lotes de conversaciones irá aquí -->
            </div>
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const mediaTableElement = $('#mediaTable');
    const conversationPaginationContainer = document.getElementById('conversationPaginationContainer');
    let currentConversationPage = 1;
    let dataTableInstance;
    let socket;

    // Función para inicializar o añadir datos a DataTables
    function initializeOrUpdateDataTable(attachments, initialLoad = false) {
        if (initialLoad) {
            if (dataTableInstance) {
                dataTableInstance.destroy();
                mediaTableElement.find('tbody').empty();
            }
            // Colspan ajustado a 7 columnas visibles
            if (attachments.length === 0 && currentConversationPage === 1) {
                mediaTableElement.find('tbody').html('<tr><td colspan="7" class="text-center">No se encontraron archivos multimedia en Chatwoot.</td></tr>');
                renderConversationPagination(0, 1);
                return;
            }
            dataTableInstance = mediaTableElement.DataTable({
                data: attachments,
                responsive: true,
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json',
                    processing: '<i class="fas fa-spinner fa-spin fa-2x fa-fw"></i><span class="sr-only">Cargando...</span>'
                },
                columns: [
                    { 
                        data: null, title: "Miniatura", orderable: false,
                        render: function(data, type, row) {
                            const thumbnailUrl = row.thumb_url || row.data_url;
                            if (row.file_type === 'image' && thumbnailUrl) {
                                return `<img src="${thumbnailUrl}" alt="${row.file_name || 'Imagen'}" style="max-height: 50px; max-width: 70px; cursor:pointer;" onclick="window.open('${row.data_url}', '_blank')">`;
                            } else if (row.file_type === 'video' && row.data_url) {
                                return `<video src="${row.data_url}" style="max-height: 50px; max-width: 70px;" controls></video>`;
                            } else if (row.file_type === 'audio' && row.data_url) {
                                return '<i class="bi bi-file-earmark-music" style="font-size: 2rem;"></i>';
                            } else if (row.data_url) { return '<i class="bi bi-file-earmark-text" style="font-size: 2rem;"></i>'; }
                            return 'N/A';
                        }
                    },
                    { data: 'file_type', title: "Tipo", defaultContent: "N/A" },
                    { 
                        data: 'file_size', title: "Tamaño",
                        render: function(data, type, row) {
                            if (data) {
                                const bytes = parseInt(data, 10);
                                if (bytes === 0) return '0 Bytes'; const k = 1024;
                                const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
                                const i = Math.floor(Math.log(bytes) / Math.log(k));
                                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
                            } return 'N/A';
                        }
                    },
                    {
                        data: null, title: "Dimensiones",
                        render: function(data, type, row) {
                            if (row.file_type === 'image' && row.width && row.height) { return `${row.width} x ${row.height}`; }
                            return 'N/A';
                        }
                    },
                    { data: 'sender_name', title: "Remitente", defaultContent: "Desconocido" },
                    { data: 'conversation_id', title: "Conv. ID" },
                    { 
                        data: 'created_at', title: "Fecha",
                        render: function(data, type, row) { return data ? new Date(data * 1000).toLocaleDateString() : 'N/A'; }
                    }
                ],
                order: [[6, 'desc']], // Ordenar por Fecha (columna 7, ahora es la 6 por 0-index)
                paging: true,
                searching: true,
                info: true
            });
        } else if (dataTableInstance) {
            // Si la tabla ya existe y no hay datos, limpiamos el mensaje "No se encontraron..."
            // Colspan ajustado a 7
            if (dataTableInstance.data().count() === 0 && mediaTableElement.find('tbody td[colspan="7"]').length > 0) {
                dataTableInstance.clear().draw();
            }
            // Añadir nuevas filas y redibujar
            dataTableInstance.rows.add(attachments).draw(false);
        } else {
            // Si la tabla no existe (caso borde, debería ser creada por initialLoad), la creamos.
            initializeOrUpdateDataTable(attachments, true);
        }
    }

    async function loadConversationBatch(page = 1) {
        // console.log(`Cargando lote de conversaciones, página: ${page}`);
        try {
            const response = await fetch(`/api/chatwoot-media?page=${page}`);
            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ error: `Error al cargar multimedia: ${response.statusText}` }));
                throw new Error(errorData.error || `Error ${response.status}`);
            }
            const result = await response.json();
            // console.log(`Datos recibidos del backend para página de conversación ${page}:`, JSON.parse(JSON.stringify(result))); // Log de result
            const attachments = result.data || [];
            currentConversationPage = result.currentPage || 1;
            const totalConversationPages = result.totalPages || 0;

            initializeOrUpdateDataTable(attachments, true); // Carga inicial para el lote
            renderConversationPagination(totalConversationPages, currentConversationPage);

        } catch (error) {
            console.error('Error al cargar multimedia de Chatwoot:', error);
            if (dataTableInstance) {
                dataTableInstance.destroy();
                mediaTableElement.find('tbody').empty();
            }
            // Colspan ajustado a 7
            mediaTableElement.find('tbody').html(`<tr><td colspan="7" class="text-center text-danger">Error: ${error.message}</td></tr>`);
            renderConversationPagination(0,1);
        }
    }

    function renderConversationPagination(totalPages, page) {
        conversationPaginationContainer.innerHTML = '';
        if (totalPages <= 1) return;

        const ul = document.createElement('ul');
        ul.className = 'pagination';

        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${page === 1 ? 'disabled' : ''}`;
        const prevA = document.createElement('a');
        prevA.className = 'page-link';
        prevA.href = '#';
        prevA.textContent = 'Lote Anterior';
        prevA.addEventListener('click', (e) => {
            e.preventDefault(); if (page > 1) loadConversationBatch(page - 1);
        });
        prevLi.appendChild(prevA);
        ul.appendChild(prevLi);

        // Info de página actual de lotes
        const pageInfoLi = document.createElement('li');
        pageInfoLi.className = 'page-item disabled';
        const pageInfoSpan = document.createElement('span');
        pageInfoSpan.className = 'page-link';
        pageInfoSpan.textContent = `Lote ${page} de ${totalPages}`;
        pageInfoLi.appendChild(pageInfoSpan);
        ul.appendChild(pageInfoLi);
        
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${page >= totalPages ? 'disabled' : ''}`;
        const nextA = document.createElement('a');
        nextA.className = 'page-link';
        nextA.href = '#';
        nextA.textContent = 'Siguiente Lote';
        nextA.addEventListener('click', (e) => {
            e.preventDefault(); if (page < totalPages) loadConversationBatch(page + 1);
        });
        nextLi.appendChild(nextA);
        ul.appendChild(nextLi);

        conversationPaginationContainer.appendChild(ul);
    }

    loadConversationBatch(currentConversationPage);

    function setupSocketIO() {
        // La URL del socket se obtiene de la configuración guardada en data/app-config.json
        // El footer.ejs ya incluye el script de socket.io.js desde la URL configurada
        // Conectamos a la URL base del servidor de sockets.
        socket = io.connect('https://socket.percyalvarez.com', { 
            // Opciones de conexión si son necesarias, por ejemplo, si el servidor usa un path específico:
            // path: '/socket.io' 
            // Considerar 'reconnectionAttempts' o 'transports' si hay problemas de conexión persistentes.
        });

        socket.on('connect', () => {
            console.log('Conectado al servidor de Socket.IO para multimedia.');
            // Unirse a la sala configurada en app-config.json (asumiendo que es 'pos-tvp-2025')
            // El servidor socket.percyalvarez.com debe estar configurado para manejar esta sala.
            const roomToJoin = 'pos-tvp-2025'; // Podríamos obtener esto de la config si estuviera disponible en el frontend
            socket.emit('join_room', { roomName: roomToJoin }); 
            console.log(`Intentando unirse a la sala: ${roomToJoin} con el formato { roomName: "${roomToJoin}" }`);
        });

        // Escuchar el evento que envía nuevos items multimedia.
        // El nombre del evento 'new_media_item' es una suposición basada en el README.
        // Debe coincidir exactamente con el evento emitido por `externalSocketService.js`.
        socket.on('new_media_item', (mediaItem) => {
            console.log('Nuevo item multimedia recibido vía Socket.IO:', mediaItem);
            if (mediaItem) {
                const itemsToAdd = Array.isArray(mediaItem) ? mediaItem : [mediaItem];
                initializeOrUpdateDataTable(itemsToAdd, false); // Añadir sin recargar toda la tabla
            }
        });
        
        // El README menciona que chatwootApiService emite eventos de WebSockets durante la carga de multimedia.
        // Es posible que el evento sea 'chatwoot_media_progress' o similar.
        socket.on('chatwoot_media_progress', (progressData) => {
            console.log('Progreso de carga multimedia Chatwoot (evento chatwoot_media_progress):', progressData);
            // Si este evento también contiene el item multimedia nuevo:
            if (progressData && progressData.newItem) { 
                 console.log('Nuevo item multimedia (desde chatwoot_media_progress) recibido vía Socket.IO:', progressData.newItem);
                 const itemsToAdd = Array.isArray(progressData.newItem) ? progressData.newItem : [progressData.newItem];
                 initializeOrUpdateDataTable(itemsToAdd, false);
            }
            // Aquí también se podría actualizar un indicador de progreso en la UI si se desea.
            // ej: $('#media-loading-progress').text(`Página ${progressData.page}/${progressData.totalPages} procesada. ${progressData.newItemsFoundThisPage} nuevos.`);
        });

        socket.on('disconnect', (reason) => {
            console.log('Desconectado del servidor de Socket.IO:', reason);
        });

        socket.on('connect_error', (error) => {
            console.error('Error de conexión con Socket.IO:', error);
        });

        // Considerar manejar 'reconnect_attempt', 'reconnect', 'reconnect_error', 'reconnect_failed'
        // para dar feedback al usuario sobre el estado de la conexión.
    }

    setupSocketIO(); // Configurar Socket.IO después de la carga inicial
});
</script>
<style>
.media-thumbnail {
    max-height: 150px; /* Ajusta según necesidad */
    object-fit: cover; /* Para que las imágenes se ajusten bien */
    width: 100%;
}
.media-card {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}
.media-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}
</style>

<%- include('partials/footer') %>
